import { dessertsRecipes } from "./data.js";

export function renderHeaderComponents() {
  const recipeList = document.querySelector(".main_content");
  recipeList.innerHTML = "";

  //—Å–æ–∑–¥–∞–Ω–∏–µ —à–∞–ø–∫–∏ —Å –ø–æ–ª–µ–º –≤–≤–æ–¥–∞ –∏ –∫–Ω–æ–ø–∫–∞–º–∏
  const headerContainer = document.createElement("div");
  headerContainer.className = "header_container";

  //–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –∫–æ—Ç–æ—Ä–æ–º —Ç–æ–ª—å–∫–æ –Ω–∞–¥–ø–∏—Å—å –∏ –∫–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
  const containerForAddButton = document.createElement("div");
  containerForAddButton.className = "container_for_add_button";

  const headerText = document.createElement("span");
  headerText.textContent = "Recipes";
  headerText.className = "header_text";
  containerForAddButton.appendChild(headerText);

  const addRecipeButton = document.createElement("button");
  addRecipeButton.textContent = "Add Recipes";
  addRecipeButton.className = "add_recipe_button";
  containerForAddButton.appendChild(addRecipeButton);

  headerContainer.appendChild(containerForAddButton);

  //–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –≤ –∫–æ—Ç–æ—Ä–æ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞, –∫–Ω–æ–ø–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏ –∫–Ω–æ–ø–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–æ–≤
  const functionalContainer = document.createElement("div");
  functionalContainer.className = "functionalContainer";

  const recipeInput = document.createElement("input");
  recipeInput.className = "new_text_recipe";
  functionalContainer.appendChild(recipeInput);

  ///////—á–∞—Å—Ç—å –∫–æ–¥–∞ –æ—Ç —á–∞—Ç–∞ gpt –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏

  const sortSelect = document.createElement("select");
  sortSelect.className = "sort_select";
  const sortOptions = ["Sort by: A-Z", "Sort by: Z-A"];

  sortOptions.forEach((option) => {
    const sortOption = document.createElement("option");
    sortOption.text = option;
    sortSelect.add(sortOption);
  });

  sortSelect.addEventListener("change", function () {
    const selectedOption = sortSelect.options[sortSelect.selectedIndex].text;
    sortRecipes(selectedOption);
  });

  functionalContainer.appendChild(sortSelect);

  //—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ —Å–ø–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–æ–≤
  function sortRecipes(sortOption) {
    const sortedRecipes = [...dessertsRecipes]; // –°–æ–∑–¥–∞–µ–º –∫–æ–ø–∏—é –º–∞—Å—Å–∏–≤–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –º–∞—Å—Å–∏–≤–∞

    if (sortOption === "Sort by: A-Z") {
      sortedRecipes.sort((a, b) => a.title.localeCompare(b.title));
    } else if (sortOption === "Sort by: Z-A") {
      sortedRecipes.sort((a, b) => b.title.localeCompare(a.title));
    }

    renderRecipes(recipeList, sortedRecipes);
  }

  //—Å–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∏–Ω–µ—Ä–∞ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø–ª–∏—Ç–∫–∞)
  const containerForViewButton = document.createElement("div");
  containerForViewButton.className = "view-toggle";

  //—Å–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –¥–ª—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (—Å–ø–∏—Å–æ–∫ –∏–ª–∏ –ø–ª–∏—Ç–∫–∞)

  const listButton = document.createElement("button");
  listButton.textContent = "‚ñ§";

  listButton.addEventListener("click", function () {
    const contentElement = document.querySelectorAll(".list-view");
    console.log(contentElement);
    for (let i = 0; i < contentElement.length; i++) {
      if (contentElement[i].classList.contains("list-view")) {
        console.log("ifList");
        contentElement[i].classList.remove("list-view");
        contentElement[i].classList.add("grid-view");
      }
    }
  });

  containerForViewButton.appendChild(listButton);

  const gridButton = document.createElement("button");
  gridButton.textContent = "‚ñ¶";

  gridButton.addEventListener("click", function () {
    const contentElement = document.querySelectorAll(".grid-view");
    console.log(contentElement);
    for (let i = 0; i < contentElement.length; i++) {
      if (contentElement[i].classList.contains("grid-view")) {
        console.log("ifGrid");
        contentElement[i].classList.remove("grid-view");
        contentElement[i].classList.add("list-view");
      }
    }
  });

  containerForViewButton.appendChild(gridButton);

  functionalContainer.appendChild(containerForViewButton);

  headerContainer.appendChild(functionalContainer);

  //—Å–ª—É—à–∞—Ç–µ–ª—å –∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞, —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞
  addRecipeButton.addEventListener("click", function () {
    const newRecipeTitle = recipeInput.value.trim();
    if (newRecipeTitle !== "") {
      const newRecipe = {
        title: newRecipeTitle,
        mainImages: [],
        ingridientsList: [],
        steps: [],
        stepsImage: [],
      };
      dessertsRecipes.push(newRecipe);
      recipeInput.value = "";
      renderRecipes(recipeList, dessertsRecipes);
    }
  });

  recipeList.appendChild(headerContainer);
  console.log(recipeList);
  renderRecipes(recipeList, dessertsRecipes);
}

//—Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–∞–∂–¥–æ–≥–æ —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ –º–∞—Å—Å–∏–≤–∞
function renderRecipes(recipeList, recipes) {
  console.log(recipeList);
  recipes.forEach((recipe, index) => {
    //const recipeContent = renderRecipeContent(recipe, index);

    //recipeList.appendChild(recipeContent);

    const contentElement = document.createElement("div");
    contentElement.className = "container_for_recipe list-view";
    const titleContainer = document.createElement("div");
    titleContainer.textContent = recipe.title;

    //–∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–µ—Ü–µ–ø—Ç–∞
    const deleteButton = document.createElement("button");
    deleteButton.textContent = "üóëÔ∏è";
    deleteButton.onclick = (index) => {
      console.log("be delete");
      const newListRecipeWithOutDeleteElement = dessertsRecipes.splice(
        index,
        1
      );
      console.log("deleted");
      renderRecipes(newListRecipeWithOutDeleteElement, dessertsRecipes);
    };
    titleContainer.appendChild(deleteButton);

    contentElement.appendChild(titleContainer);

    //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –≥–ª–∞–≤–Ω—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ —Ä–µ—Ü–µ–ø—Ç–∞
    const imagesContainer = document.createElement("div");
    imagesContainer.className = "image_container";
    recipe.mainImages.forEach((image) => {
      const img = document.createElement("img");
      img.src = image;
      imagesContainer.appendChild(img);
    });
    contentElement.appendChild(imagesContainer);
    //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∏–Ω–≥—Ä–∏–¥–∏–µ–Ω—Ç–æ–≤ –∏–∑ –º–∞—Å—Å–∏–≤–∞
    const containerIngridientsList = document.createElement("ul");
    const recipeIngridientsList = recipe.ingridientsList;
    for (let ingridient of recipeIngridientsList) {
      const recipeIngridient = document.createElement("li");
      recipeIngridient.textContent = ingridient;
      containerIngridientsList.appendChild(recipeIngridient);
    }

    contentElement.appendChild(containerIngridientsList);
    //–¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ—à–∞–≥–æ–≤—ã—Ö –∫–∞—Ä—Ç–∏–Ω–æ–∫ –∏ —Ç–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∫ –Ω–∏–º
    const containerStepImage = document.createElement("div");
    const recipeStepImage = recipe.stepsImage;
    for (let i = 0; i < recipeStepImage.length; i++) {
      const stepImg = document.createElement("img");
      stepImg.src = recipeStepImage[i];

      const recipeStepText = document.createElement("span");
      recipeStepText.textContent = recipe.steps[i];

      const stepContainer = document.createElement("div");
      stepContainer.appendChild(stepImg);
      stepContainer.appendChild(recipeStepText);

      containerStepImage.appendChild(stepContainer);
    }

    contentElement.appendChild(containerStepImage);
    recipeList.appendChild(contentElement);
    return contentElement;
  });
}

// function deleteRecipe(index) {
//   dessertsRecipes.splice(index, 1);
//   renderRecipes(recipeList, dessertsRecipes);
// }
